<?php

namespace BaseClasses;

use Doctrine\{
    ORM\EntityRepository,
    Common\Collections\ArrayCollection
};

use Traits\ContainerAwareTrait;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BaseRepository extends EntityRepository
{
    use ContainerAwareTrait;

    /**
     * Set in true when need use Cache
     *
     * @var bool
     */
    protected $useCache = false;

    /**
     * @return boolean
     */
    public function isUseCache()
    {
        return $this->useCache;
    }

    /**
     * @param boolean $useCache
     * @return $this
     */
    public function setUseCache($useCache)
    {
        $this->useCache = $useCache;
        return $this;
    }

    /**
     *
     *
     * @param $query
     * @return ArrayCollection
     */
    public function getCollectionResult($query) : ArrayCollection
    {
        return new ArrayCollection($query);
    }

    /**
     * Return Repository object instance
     *
     * @return $this
     */
    public static function get()
    {
        preg_match('~\\\([^\\\]+Bundle).*\\\([^\\\]+)Repository~is', get_called_class(), $matches);
        $entityName = $matches[1] . ':' . $matches[2];
        return static::getContainer()->get("doctrine")->getRepository($entityName);
    }

    /**
     * Creates a new QueryBuilder instance that is prepopulated for this entity name.
     *
     * @param string $alias
     * @param string $indexBy The index for the from.
     *
     * @return BaseQueryBuilder
     */
    //TODO разобраться с кешем
    public function createQueryBuilder($alias, $indexBy = null) : BaseQueryBuilder
    {
        $query = parent::createQueryBuilder($alias, $indexBy);

//        if ($this->isUseCache()) {
//            $callers = debug_backtrace();
//            $query = $query->setCacheKey(get_called_class() . ":" . $callers[1]['function']);
//        }

        return $query;
    }

    /**
     * @param $id
     * @return static
     */
    public function getById($id)
    {
        $query = $this->createQueryBuilder('t')
            ->select()
            ->where('t.id = :id')
            ->setParameter('id', $id)
            ->getQuery();

        return $query->getOneOrNullResult();
    }

    /**
     * @param boolean $withRights
     * @param array $orderBy
     * @return ArrayCollection
     */
    public function getAll($withRights = true, $orderBy = [])
    {
        $qb = $this->createQueryBuilder('t')
            ->setCustomQuery($withRights);

        foreach ($orderBy as $field => $order) {
            $qb->orderBy('t.' . $field, $order);
        }

        return $this->getCollectionResult($qb->getQuery()->getResult());
    }
}
